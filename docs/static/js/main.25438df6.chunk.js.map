{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","event","preventDefault","trim","length","item","type","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","image","id","title","images","original","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAoCgBA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEnB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OACI,sBAAMC,SATO,SAACC,GACdA,EAAMC,iBACFJ,EAAMK,OAAOC,OAAS,IACtBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAeO,OACjCN,EAAS,MAKb,SACI,uBACIO,KAAK,MACLR,MAAOA,EACPS,SAjBK,SAACN,GACdF,EAASE,EAAMO,OAAOV,a,+BCRjBW,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,0FAE4EC,UAAUH,GAFtF,sBAGII,MAAMF,GAHV,cAGbG,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAU,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbV,IAAG,UAAEQ,EAAMG,cAAR,aAAE,EAAcC,SAASZ,QAVjB,kBAaZM,GAbY,4CAAH,sDCYLO,EAVK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEzB,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCkBDO,EAtBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAEd,ECHwB,SAACA,GACzB,MAA0Bb,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDbyBK,CAAa1B,GAAhCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IACnD,sBAAKgB,UAAU,YAAf,UACMI,GAAW,mBAAGJ,UAAU,mCAAb,wBAETH,EAAOJ,KAAI,SAAAkB,GACP,OAAO,cAAC,EAAD,eAECA,GADCA,EAAIhB,cEYtBiB,EAvBM,WAEjB,MAAoCzC,mBAAS,CAAC,WAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ2C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCdjC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.25438df6.chunk.js","sourcesContent":[" \r\n\r\n import React, {useState} from 'react';\r\n import PropTypes from 'prop-types';\r\n \r\n const AddCategory = ({setCategories}) => {\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    const onChange = (event) => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (value.trim().length > 0) {\r\n            setCategories(item => [value, ...item]);\r\n            setValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <input\r\n                type='tex'\r\n                value={value}\r\n                onChange={onChange} \r\n            />\r\n        </form>\r\n    );\r\n }\r\n\r\n AddCategory.propTypes = {\r\n     setCategories: PropTypes.func.isRequired\r\n }\r\n \r\n export default AddCategory\r\n ","\r\n\r\nexport const getGifs = async(category) => {\r\n        \r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=BeD86iM9xQIWPNbQEUD51ogM24pirrhZ&q=${encodeURI(category)}&limit=10`;\r\n    const response = await fetch(url);\r\n    const {data} = await response.json();\r\n\r\n    const gifs = data.map(image => {\r\n        return {\r\n            id: image.id,\r\n            title: image.title,\r\n            url: image.images?.original.url\r\n        }\r\n    });\r\n    return gifs;\r\n}","\r\n\r\nimport React from 'react'\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifts';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n            <div className='card-grid'>\r\n                { loading && <p className='animate__animated animate__flash'>Loading...</p> }\r\n                {\r\n                    images.map(img => {\r\n                        return <GifGridItem\r\n                            key={img.id} \r\n                            {...img}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;","\r\nimport { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/GetGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n    }, [category]);\r\n\r\n    return state;\r\n}","\r\n\r\nimport React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Batman']);\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}